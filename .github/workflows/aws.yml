name: Deploy to Amazon ECS

on:
  workflow_run:
    workflows: ["Run django tests"]
    types:
      - completed
  push:
    branches: ["main"]

env:
  AWS_REGION: us-east-1 # set this to your preferred AWS region, e.g. us-west-1
  ECS_CLUSTER: email_app_home_9 # set this to your Amazon ECS cluster name
  ECR_REPOSITORY: home9/email_app_repository_back # set this to your Amazon ECR repository name
  ECS_TASK_DEFINITION: .github/workflows/email_app_task_definition_back-revision9.json # set this to the path to your Amazon ECS task definition
  ECS_SERVICE: back_email_app_service #forest-app-service-ecs # set this to your Amazon ECS service name
    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: back_email_app_container

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.

          echo "$ECR_REGISTRY este es el registro"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

          # aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/l8x0d6p9
          # docker build -t macv9620/forest-app-repository . PRUEBA
          # docker tag macv9620/forest-app-repository:latest public.ecr.aws/l8x0d6p9/macv9620/forest-app-repository:latest
          # docker push public.ecr.aws/l8x0d6p9/macv9620/forest-app-repository:latest
          # echo "image=public.ecr.aws/l8x0d6p9/macv9620/forest-app-repository:latest" >> $GITHUB_OUTPUT
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true